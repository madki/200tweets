import pickle
from google.appengine.ext.webapp import RequestHandler, template
from google.appengine.ext import db
import tweepy


CONSUMER_KEY = 'M3VWcyQ7NyJ1hy6yR2FtQ'
CONSUMER_SECRET = 'GAin1ygqcIl3E4nrolGv5J1kuEjPinjTSaQUrYrY90E'

ACCESS_KEY ='396277518-tx1GBAqD6tncKPyUpLAY8KKe936rlRAgUdWLFVT3'
ACCESS_SECRET = 'H6GBUexeISCDvtbEsikFv8f7AMk1GwMYlklPkC1SM'

# Main page handler  
class MainPage(RequestHandler):

    def get(self):
        # Authorising using my access tokens
        auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
	auth.set_request_token(ACCESS_KEY, ACCESS_SECRET)

# Callback page (/oauth/callback)
class CallbackPage(RequestHandler):

    def get(self):
        oauth_token = self.request.get("oauth_token", None)
        oauth_verifier = self.request.get("oauth_verifier", None)
        if oauth_token is None:
            # Invalid request!
            print template.render('error.html', {
                    'message': 'Missing required parameters!'
            })
            return

        # Lookup the request token
        request_token = OAuthToken.gql("WHERE token_key=:key", key=oauth_token).get()
        if request_token is None:
            # We do not seem to have this request token, show an error.
            print template.render('error.html', {'message': 'Invalid token!'})
            return

        # Rebuild the auth handler
        auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
        auth.set_request_token(request_token.token_key, request_token.token_secret)

        # Fetch the access token
        try:
            auth.get_access_token(oauth_verifier)
        except tweepy.TweepError, e:
            # Failed to get access token
            print template.render('error.html', {'message': e})
            return
        
        # acquiring recent tweets by user
	api = tweepy.API(auth)
	tweets = []
	for status in tweepy.Cursor(api.user_timeline).items(200):
    		tweets.append(status)
	
        
        # So now we could use this auth handler.
        # Here we will just display the access token key&secret
        print template.render('oauth_example/callback.html', {
            'access_token': auth.access_token, 'tweets': tweets,
        })
        

        	

